test <- bin.variables(dat=test)
train <- misc.features(dat=train)
test <- misc.features(dat=test)
# removing levels not present in test
train <- subset(train, RoofMatl %in% c("CompShg", "Tar&Grv", "WdShake", "WdShngl"))
train$RoofMatl <- as.factor(as.character(train$RoofMatl))
train <- subset(train, !(HouseStyle %in% c("2.5Fin")))
train$HouseStyle <- as.factor(as.character(train$HouseStyle))
train <- subset(train, !(Exterior1st %in% c("ImStucc","Stone")))
train$Exterior1st <- as.factor(as.character(train$Exterior1st))
train <- subset(train, !(Exterior2nd %in% c("Other")))
train$Exterior2nd <- as.factor(as.character(train$Exterior2nd))
train <- subset(train, !(Electrical %in% c("Mix")))
train$Electrical <- as.factor(as.character(train$Electrical))
train <- subset(train, !(GarageQual %in% c("Ex")))
train$GarageQual <- as.factor(as.character(train$GarageQual))
# Removing Columns
rmv.cols <- c("Street","Condition2", "MiscFeature", 'PoolQC','PoolArea',
"BsmtFinSF2", "BsmtUnfSF", "X2ndFlrSF",
"GarageYrBlt", "YearRemodAdd", 'MoSold',
"Utilities", 'MSSubClass',"Heating","OverallCond")
dim(train);dim(test)
train[,(rmv.cols):=NULL]
test[,(rmv.cols):=NULL]
any(is.na(train))
any(is.na(test))
for(n in names(test_impute$imp)){
x = test_impute$imp[[n]][,1]
test[is.na(get(n)),(n):=x]
}
test$num_ext_materials <- ifelse(as.character(test$Exterior1st)==as.character(test$Exterior2nd),1,2)
test$Partial_Old <- ifelse(((test$SaleCondition=="Partial" | test$SaleCondition=="Abnorml") &
test$YearBuilt<=1990),1,0)
train[Time_Since_Remodel<0,AgeofHouse:=50]
train[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[Time_Since_Remodel<0,AgeofHouse:=50]
test[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[is.na(AgeofHouse), AgeofHouse:=25]
train[,YearBuilt:=NULL]
test[,YearBuilt:=NULL]
any(is.na(train))
any(is.na(test))
train_orig <- copy(train)
test_orig <- copy(test)
target = train$SalePrice
train[,SalePrice:=NULL]
fm <- formula(paste("~ ",paste(colnames(train),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = train, sep = NULL)
train <- predict(dummyObj,train)
train <- data.table(train)
train$SalePrice = target
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),nrow(train),replace = F)
train <- train[indx,]
train$kfolds <- rep(x = 1:5, length.out = nrow(train))
tail(colnames(train))
library(glmnet)
train_scored = NULL
train_orig2 <- copy(train)
bestlam_all = c()
dim(train_orig)
dim(train_orig2)
for(i in 1:5){
val <- train_orig2[kfolds==i,]
train <- train_orig2[kfolds!=i,]
# dim(train); dim(val);
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, Id =NULL, kfolds = NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, Id =NULL, kfolds=NULL)]
grid=seq(1,0,-0.001)
set.seed(1)
ridge.mod=glmnet(as.matrix(x_train),y_train,alpha=1)
cv.out=cv.glmnet(as.matrix(x_train),y_train,alpha=1)
#plot(cv.out)
bestlam =cv.out$lambda.min #0.09013617
bestlam_all = c(bestlam_all,bestlam)
ridge.pred_test=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_val))
ridge.pred_train=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_train))
test_rmse_ridge=c(test_rmse_ridge,
RMSE(log(y_val^2.5+1),log(ridge.pred_test^2.5+1),wt=1))
train_rmse_ridge=c(train_rmse_ridge,
RMSE(log(y_train^2.5+1),log(ridge.pred_train^2.5+1),wt=1))
#val <- train_orig[indx,]
val$predicted_price = ridge.pred_test^2.5
train_scored <- rbind(train_scored,val)
}
test_rmse_ridge
train_scored_rmse=RMSE(log(train_scored$predicted_price^2.5+1),
log(train_scored$SalePrice^2.5+1),wt=1)
train_scored_rmse
train_scored_rmse=RMSE(log(train_scored$predicted_price^2.5+1),
log(train_scored$SalePrice+1),wt=1)
train_scored_rmse
train_scored_rmse=RMSE(log(train_scored$predicted_price+1),
log(train_scored$SalePrice+1),wt=1)
print(train_scored_rmse)
tail(colnames(train_orig))
train = copy(train_orig)
target = train$SalePrice
train[,SalePrice:=NULL]
dat_all <- rbind(train,test)
fm <- formula(paste("~ ",paste(colnames(dat_all),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = dat_all, sep = NULL)
dat_all <- predict(dummyObj,dat_all)
dat_all <- data.table(dat_all)
train <- dat_all[1:nrow(train_orig),]
test <- dat_all[(nrow(train_orig)+1):nrow(dat_all),]
train <- data.table(train)
test <- data.table(test)
train$SalePrice = target
test$SalePrice = 0
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),nrow(train),replace = F)
train <- train[indx,]
train$kfolds <- rep(x = 1:5, length.out = nrow(train))
library(glmnet)
train_orig2 <- copy(train)
bestlam_all = c()
bestlam_all
bestlam_all =c(bestlam_all,11)
bestlam_all
bestlam_all = c()
for(i in 1:5){
train <- train_orig2[kfolds!=i,]
# dim(train); dim(val);
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, Id =NULL, kfolds = NULL)]
grid=seq(1,0,-0.001)
set.seed(1)
ridge.mod=glmnet(as.matrix(x_train),y_train,alpha=1)
cv.out=cv.glmnet(as.matrix(x_train),y_train,alpha=1)
#plot(cv.out)
bestlam =cv.out$lambda.min #0.09013617
x_test = copy(test)
x_test <- subset(x_test, select = colnames(x_train))
x_test[,Id:= NULL]
ridge.pred_test=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_test))
test$SalePrice =(test$SalePrice + (ridge.pred_test[,1])^2.5)
}
summary(train_orig$SalePrice)
dim(train_orig)
dim(test)
summary(test$SalePrice)
test$SalePrice = test$SalePrice/5
summary(test$SalePrice)
any(is.na(test))
write.csv(test[,c("Id","SalePrice"),with=F],
file = "../MODEL/Submission_V10.csv", row.names = F)
train = read.csv("../RAW/train.csv", header = TRUE)
test = read.csv("../RAW/test.csv", header = TRUE)
source("./lib.R")
train <- treat.missing.values(dat=train)
test <- treat.missing.values(dat=test)
# Binning some numeric variables and dropping the original cols
train$HouseStyle <- as.factor(train$HouseStyle)
test$HouseStyle <- as.factor(test$HouseStyle)
train <- data.table(train)
test <- data.table(test)
train <- bin.variables(dat=train)
test <- bin.variables(dat=test)
train <- misc.features(dat=train)
test <- misc.features(dat=test)
# removing levels not present in test
train <- subset(train, RoofMatl %in% c("CompShg", "Tar&Grv", "WdShake", "WdShngl"))
train$RoofMatl <- as.factor(as.character(train$RoofMatl))
train <- subset(train, !(HouseStyle %in% c("2.5Fin")))
train$HouseStyle <- as.factor(as.character(train$HouseStyle))
train <- subset(train, !(Exterior1st %in% c("ImStucc","Stone")))
train$Exterior1st <- as.factor(as.character(train$Exterior1st))
train <- subset(train, !(Exterior2nd %in% c("Other")))
train$Exterior2nd <- as.factor(as.character(train$Exterior2nd))
train <- subset(train, !(Electrical %in% c("Mix")))
train$Electrical <- as.factor(as.character(train$Electrical))
train <- subset(train, !(GarageQual %in% c("Ex")))
train$GarageQual <- as.factor(as.character(train$GarageQual))
# Removing Columns
rmv.cols <- c("Street","Condition2", "MiscFeature", 'PoolQC','PoolArea',
"BsmtFinSF2", "BsmtUnfSF", "X2ndFlrSF",
"GarageYrBlt", "YearRemodAdd", 'MoSold',
"Utilities", 'MSSubClass',"Heating","OverallCond")
dim(train);dim(test)
train[,(rmv.cols):=NULL]
test[,(rmv.cols):=NULL]
any(is.na(train))
any(is.na(test))
for(n in names(test_impute$imp)){
x = test_impute$imp[[n]][,1]
test[is.na(get(n)),(n):=x]
}
test$num_ext_materials <- ifelse(as.character(test$Exterior1st)==as.character(test$Exterior2nd),1,2)
test$Partial_Old <- ifelse(((test$SaleCondition=="Partial" | test$SaleCondition=="Abnorml") &
test$YearBuilt<=1990),1,0)
train[Time_Since_Remodel<0,AgeofHouse:=50]
train[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[Time_Since_Remodel<0,AgeofHouse:=50]
test[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[is.na(AgeofHouse), AgeofHouse:=25]
train[,YearBuilt:=NULL]
test[,YearBuilt:=NULL]
train_orig <- copy(train)
test_orig <- copy(test)
target = train$SalePrice
train[,SalePrice:=NULL]
fm <- formula(paste("~ ",paste(colnames(train),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = train, sep = NULL)
train <- predict(dummyObj,train)
train <- data.table(train)
train$SalePrice = target
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),nrow(train),replace = F)
train <- train[indx,]
train$kfolds <- rep(x = 1:5, length.out = nrow(train))
train_scored = NULL
train_orig2 <- copy(train)
bestlam_all = c()
test_rmse_ridge = c()
train_rmse_ridge = c()
for(i in 1:5){
val <- train_orig2[kfolds==i,]
train <- train_orig2[kfolds!=i,]
# dim(train); dim(val);
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, kfolds = NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, kfolds=NULL)]
grid=seq(1,0,-0.001)
set.seed(1)
ridge.mod=glmnet(as.matrix(x_train),y_train,alpha=1)
cv.out=cv.glmnet(as.matrix(x_train),y_train,alpha=1)
#plot(cv.out)
bestlam =cv.out$lambda.min #0.09013617
bestlam_all = c(bestlam_all,bestlam)
ridge.pred_test=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_val))
ridge.pred_train=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_train))
test_rmse_ridge=c(test_rmse_ridge,
RMSE(log(y_val^2.5+1),log(ridge.pred_test^2.5+1),wt=1))
train_rmse_ridge=c(train_rmse_ridge,
RMSE(log(y_train^2.5+1),log(ridge.pred_train^2.5+1),wt=1))
#val <- train_orig[indx,]
val$predicted_price = ridge.pred_test^2.5
train_scored <- rbind(train_scored,val)
}
log(train_scored$SalePrice+1),wt=1)
print(train_scored_rmse)
train_scored_rmse=RMSE(log(train_scored$predicted_price+1),
log(train_scored$SalePrice+1),wt=1)
print(train_scored_rmse)
test_rmse_ridge = c()
train_scored = NULL
train_orig2 <- copy(train)
bestlam_all = c()
test_rmse_ridge = c()
train_rmse_ridge = c()
dim(train_orig2)
train = copy(train_orig)
target = train$SalePrice
train[,SalePrice:=NULL]
fm <- formula(paste("~ ",paste(colnames(train),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = train, sep = NULL)
train <- predict(dummyObj,train)
train <- data.table(train)
train$SalePrice = target
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),nrow(train),replace = F)
train <- train[indx,]
train$kfolds <- rep(x = 1:5, length.out = nrow(train))
library(glmnet)
train_scored = NULL
train_orig2 <- copy(train)
bestlam_all = c()
test_rmse_ridge = c()
train_rmse_ridge = c()
for(i in 1:5){
val <- train_orig2[kfolds==i,]
train <- train_orig2[kfolds!=i,]
# dim(train); dim(val);
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, kfolds = NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, kfolds=NULL)]
grid=seq(1,0,-0.001)
set.seed(1)
ridge.mod=glmnet(as.matrix(x_train),y_train,alpha=1)
cv.out=cv.glmnet(as.matrix(x_train),y_train,alpha=1)
#plot(cv.out)
bestlam =cv.out$lambda.min #0.09013617
bestlam_all = c(bestlam_all,bestlam)
ridge.pred_test=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_val))
ridge.pred_train=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_train))
test_rmse_ridge=c(test_rmse_ridge,
RMSE(log(y_val^2.5+1),log(ridge.pred_test^2.5+1),wt=1))
train_rmse_ridge=c(train_rmse_ridge,
RMSE(log(y_train^2.5+1),log(ridge.pred_train^2.5+1),wt=1))
#val <- train_orig[indx,]
val$predicted_price = ridge.pred_test^2.5
train_scored <- rbind(train_scored,val)
}
train_scored_rmse=RMSE(log(train_scored$predicted_price+1),
log(train_scored$SalePrice+1),wt=1)
print(train_scored_rmse)
test_rmse_ridge
train_rmse_ridge
train = copy(train_orig)
target = train$SalePrice
train[,SalePrice:=NULL]
fm <- formula(paste("~ ",paste(colnames(train),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = train, sep = NULL)
train <- predict(dummyObj,train)
train <- data.table(train)
train$SalePrice = target
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),nrow(train),replace = F)
train <- train[indx,]
train$kfolds <- rep(x = 1:5, length.out = nrow(train))
library(randomForest)
train_scored = NULL
train_orig2 <- copy(train)
bestlam_all = c()
rmse_rf_test = c()
rmse_rf_train = c()
for(i in 1:5){
val <- train_orig2[kfolds==i,]
train <- train_orig2[kfolds!=i,]
# dim(train); dim(val);
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, Id =NULL, kfolds = NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, Id =NULL, kfolds=NULL)]
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 1000, importance = T,
nodesize = 2, keep.forest = T)
preds_rf_test=predict(model_rf,newdata = x_val,type="response")
preds_rf_train=predict(model_rf,newdata = x_train,type="response")
rmse_rf_test=c(rmse_rf_test, RMSE(log(y_val^2.5+1),log(preds_rf_test^2.5+1),wt=1))
rmse_rf_train=c(rmse_rf_train, RMSE(log(y_train^2.5+1),log(preds_rf_train^2.5+1),wt=1))
#val <- train_orig[indx,]
val$predicted_price = rmse_rf_test^2.5
train_scored <- rbind(train_scored,val)
}
head(warnings())
warnings()
rmse_rf_test
train_scored_rmse=RMSE(log(train_scored$predicted_price+1),
log(train_scored$SalePrice+1),wt=1)
print(train_scored_rmse)
table(train_orig2$kfolds)
train = copy(train_orig2)
dim(train)
tail(colnames(train))
for(i in 1:5){
val <- train_orig2[kfolds==i,]
train <- train_orig2[kfolds!=i,]
# dim(train); dim(val);
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, kfolds = NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, kfolds=NULL)]
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 1000, importance = T,
nodesize = 2, keep.forest = T)
preds_rf_test=predict(model_rf,newdata = x_val,type="response")
preds_rf_train=predict(model_rf,newdata = x_train,type="response")
rmse_rf_test=c(rmse_rf_test, RMSE(log(y_val^2.5+1),log(preds_rf_test^2.5+1),wt=1))
rmse_rf_train=c(rmse_rf_train, RMSE(log(y_train^2.5+1),log(preds_rf_train^2.5+1),wt=1))
#val <- train_orig[indx,]
val$predicted_price = preds_rf_test^2.5
train_scored <- rbind(train_scored,val)
}
rmse_rf_test
dim(train_scored)
train_scored <- train_scored[1442:2882,]
train_scored_rmse=RMSE(log(train_scored$predicted_price+1),
log(train_scored$SalePrice+1),wt=1)
print(train_scored_rmse)
?randomForest
head(model_rf$importance)
(model_rf$importance)
dim(train_orig2)
train_scored = NULL
bestlam_all = c()
rmse_rf_test = c()
rmse_rf_train = c()
for(i in 1:5){
val <- train_orig2[kfolds==i,]
train <- train_orig2[kfolds!=i,]
# dim(train); dim(val);
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, kfolds = NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, kfolds=NULL)]
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 1000, importance = T,
nodesize = 10, keep.forest = T)
preds_rf_test=predict(model_rf,newdata = x_val,type="response")
preds_rf_train=predict(model_rf,newdata = x_train,type="response")
rmse_rf_test=c(rmse_rf_test, RMSE(log(y_val^2.5+1),log(preds_rf_test^2.5+1),wt=1))
rmse_rf_train=c(rmse_rf_train, RMSE(log(y_train^2.5+1),log(preds_rf_train^2.5+1),wt=1))
#val <- train_orig[indx,]
val$predicted_price = preds_rf_test^2.5
train_scored <- rbind(train_scored,val)
}
rmse_rf_test
train = copy(train_orig)
dim(train)
target = train$SalePrice
train[,SalePrice:=NULL]
dat_all <- rbind(train,test)
fm <- formula(paste("~ ",paste(colnames(dat_all),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = dat_all, sep = NULL)
dat_all <- predict(dummyObj,dat_all)
dat_all <- data.table(dat_all)
train <- dat_all[1:nrow(train_orig),]
test <- dat_all[(nrow(train_orig)+1):nrow(dat_all),]
train <- data.table(train)
test <- data.table(test)
train$SalePrice = target
test$SalePrice = 0
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),nrow(train),replace = F)
train <- train[indx,]
train$kfolds <- rep(x = 1:5, length.out = nrow(train))
train_orig2 <- copy(train)
for(i in 1:5){
train <- train_orig2[kfolds!=i,]
# dim(train); dim(val);
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, kfolds = NULL)]
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 1000, importance = T,
nodesize = 2, keep.forest = T)
x_test = copy(test)
x_test <- subset(x_test, select = colnames(x_train))
x_test[,Id:= NULL]
preds_rf_test=predict(model_rf,newdata = x_test,type="response")
test$SalePrice =(test$SalePrice + (preds_rf_test[,1]^2.5))
}
for(i in 1:5){
train <- train_orig2[kfolds!=i,]
# dim(train); dim(val);
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, kfolds = NULL)]
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 1000, importance = T,
nodesize = 2, keep.forest = T)
x_test = copy(test)
x_test <- subset(x_test, select = colnames(x_train))
#x_test[,Id:= NULL]
preds_rf_test=predict(model_rf,newdata = x_test,type="response")
test$SalePrice =(test$SalePrice + (preds_rf_test^2.5))
}
test$SalePrice = test$SalePrice/5
summary(test$SalePrice)
write.csv(test[,c("Id","SalePrice"),with=F],
file = "../MODEL/Submission_V11.csv", row.names = F)
any(is.na(test))
levels(train_orig$SaleCondition)
?randomForest
