library(data.table)
library(caret)
install.packages("pbkrtest")
library(data.table)
install.packages("data.table")
install.packages("ggplot2")
install.packages("xgboost")
install.packages("caret")
library(data.table)
library(caret)
?confusionMatrix
setwd("~/Documents/StudyWork/Kaggle/Knocktober/CODES")
train = read.csv("../DERIVED/train_outcome_camp_details.csv")
train = data.table(train)
train[,":="(Camp_Start_Month = as.integer(strftime(Camp_Start_Date,"%m")),
Camp_Start_wkDay = as.integer(strftime(Camp_Start_Date,"%u")),
Registration_Month = as.integer(strftime(Registration_Date,"%m")),
Registration_wkDay = as.integer(strftime(Registration_Date,"%u")))]
profile = read.csv("../RAW/Patient_Profile.CSV")
profile = data.table(profile)
cols_withNA = c("Income","Education_Score","Age")
profile[,(cols_withNA):=lapply(.SD,function(x){x[x=="None"]=NA
return (x)}), .SDcols = cols_withNA]
cols_withBlank = c("City_Type","Employer_Category")
profile[,(cols_withBlank):=lapply(.SD,function(x){x[x==""]=NA
return (x)}), .SDcols = cols_withBlank]
profile[,":="(Education_Score = as.numeric(as.character(Education_Score)),
Age = as.integer(as.character(Education_Score)))]
train = merge(train, profile, by = c("Patient_ID"))
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
dim(train)
dim(val)
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
library(xgboost)
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 6,
eta = 0.01,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 20,
colsample_bytree = 0.5)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 500,
params = param, verbose = 2, missing = 111222333)
install.packages("pROC")
library(pROC)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
preds_xgb[preds_xgb>0.5]=1
preds_xgb[preds_xgb<0.5]=0
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
preds_xgb[preds_xgb>0.3]=1
preds_xgb[preds_xgb<0.3]=0
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
preds_xgb[preds_xgb>0]=1
preds_xgb[preds_xgb<0]=0
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
preds_xgb[preds_xgb>0.2]=1
preds_xgb[preds_xgb<0.2]=0
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
c = confusionMatrix(preds_xgb,y_val)
preds_xgb[preds_xgb>0.25]=1
preds_xgb[preds_xgb<0.25]=0
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
c = confusionMatrix(preds_xgb,y_val)
install.packages("e1071")
c = confusionMatrix(preds_xgb,y_val)
c
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
preds_xgb[preds_xgb>0.5]=1
preds_xgb[preds_xgb<0.5]=0
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
c = confusionMatrix(preds_xgb,y_val)
c
c = confusionMatrix(preds_xgb,y_val,positive = "1")
c
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
preds_xgb[preds_xgb>0.22]=1
preds_xgb[preds_xgb<0.22]=0
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
train = read.csv("../DERIVED/train_all_merged.csv")
summary(train)
train = data.table(train)
sapply(train)
sapply(train,class)
?auc
mean(val$Outcome)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
preds_xgb[preds_xgb>0.37]=1
preds_xgb[preds_xgb<0.37]=0
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
mean(train$Outcome)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
preds_xgb[preds_xgb>0.2727756]=1
preds_xgb[preds_xgb<0.2727756]=0
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
strptime
?strptime
train[,First_Interaction := strptime(First_Interaction, format = "%d-%b-%y")]
clasS(train)
class(train)
train[,First_Interaction := strptime(train$First_Interaction, format = "%d-%b-%y")]
train[,First_Interaction := strftime(train$First_Interaction, format = "%d-%b-%y")]
train[,First_Interaction := as.Date(train$First_Interaction, format = "%d-%b-%y")]
summary(train$First_Interaction)
class(train$First_Interaction)
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
sapply(train,class)
train[,First_Interaction := as.Date(train$First_Interaction, format = "%d-%b-%y")]
train[,Registration_Date := as.Date(Registration_Date)]
train$Registration_Date[1] - train$First_Interaction[1]
numeirc(train$Registration_Date[1] - train$First_Interaction[1])
as.numeric(train$Registration_Date[1] - train$First_Interaction[1])
as.numeric(-train$Registration_Date[1] + train$First_Interaction[1])
as.numeric(train$First_Interaction[1] - train$Registration_Date[1])
setorder(train,"Patient_ID","Registration_Date")
train[,tmp_ind:=1:.N,by="Patient_ID"]
train[,time_association:=0]
train[tmp_ind>1 & !(is.na(First_Interaction)),time_association:= Registration_Date - First_Interaction]
tmp = train[tmp_ind==1,c("Patient_ID","Registration_Date"),with=F]
setnames(tmp,"Registration_Date","tmp_first_interaction")
dim(train)
train = merge(train,tmp,by=c("Patient_ID"),all.x=T)
dim(train)
train[tmp_ind>1 & (is.na(First_Interaction)),time_association:= Registration_Date - tmp_first_interaction]
train[,":="t(mp_ind=NULL,tmp_first_interaction=NULL)]
train[,":="(tmp_ind=NULL,tmp_first_interaction=NULL)]
dim(train)
colnames(train)
train = read.csv("../DERIVED/train_with_Outcome.csv")
train = data.table(train)
test = read.csv("../RAW/Test_D7W1juQ.csv")
test = data.table(test)
colnames(train)
health_camp <- fread("../DERIVED/Health_Camp_Detail.csv")
health_camp <- fread("../RAW/Health_Camp_Detail.csv")
train = read.csv("../DERIVED/train_all_merged.csv")
train = data.table(train)
train <- train[!(is.na(Registration_Date)),]
test = read.csv("../DERIVED/test_all_merged.csv")
test = data.table(test)
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- total.registrations.camp(df=test)
dat_common<- subset(train, Patient_ID %in% unique(test$Patient_ID))
setorder(dat_common, "Patient_ID",-"Registration_Date")
dat_common[,tmp_ind:=1:.N,by = "Patient_ID"]
s = dat_common[tmp_ind==1,c("Patient_ID","con_rate"),with=F]
test <- merge(test, s, by = "Patient_ID", all.x=T)
test[registration_num_overall==0,con_rate:=-1]
source("lib.R")
train <- registration.around.campStart(df=train)
train <- num.repeated.registration(df = train)
train <- time.of.association(df=train)
train <- total.registrations.camp(df=train)
test <- registration.around.campStart(df=test)
test <- num.repeated.registration(df = test)
test <- time.of.association(df=test)
test <- total.registrations.camp(df=test)
train.orig = copy(train)
dates = sort(unique(train$Camp_Start_Date))
val <- train[Camp_Start_Date %in% dates[31:40],]
train <- train[Camp_Start_Date %in% dates[1:30],]
drop.cols = c("Patient_ID", "Health_Camp_ID", "Registration_Date",
"Camp_Start_Date", "Camp_End_Date", "First_Interaction",
"Employer_Category")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- train$Outcome
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,Outcome:=NULL]
y_val <- val$Outcome
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,Outcome:=NULL]
x_train[is.na(x_train)] = 111222333
x_val[is.na(x_val)] = 111222333
param <- list(max_depth = 5,
eta = 0.1,
silent = 1,
objective="binary:logistic",
eval_metric="auc",
# subsample = 0.75,
min_child_weight = 2,
colsample_bytree = 0.9)
train.xg <- xgb.DMatrix(as.matrix((x_train)), label=y_train, missing=111222333)
test.xg <- xgb.DMatrix(as.matrix((x_val)), label=y_val, missing=111222333)
watchlist <- list(test = test.xg,train = train.xg)
model_xgb <- xgb.train(data=train.xg, nrounds = 100,
params = param, verbose = 2, missing = 111222333,
#early.stop.round = 500,
watchlist = watchlist,
maximize = T)
preds_xgb = predict(model_xgb,newdata = test.xg, ntreelimit=model_xgb$bestInd,
missing=111222333)
auc_xgb = auc(y_val,preds_xgb)
print(auc_xgb)
train <- fread("../RAW/Train.csv")
test <- fread("../RAW/Test_D7W1juQ.csv")
health_camp <- fread("../RAW/Health_Camp_Detail.csv")
health_1 <- fread("../RAW/First_Health_Camp_Attended.csv")
health_2 <- fread("../RAW/Second_Health_Camp_Attended.csv")
health_3 <- fread("../RAW/Third_Health_Camp_Attended.csv")
health_1[, V5 := NULL]
setnames(health_1, "Health_Score", "Health_Score_1")
setnames(health_2, "Health Score", "Health_Score_2")
patient <- fread("../RAW/Patient_Profile.csv")
train[, train_flag := 1]
test[, train_flag := 0]
## processing data
X_panel <- rbind(train, test)
# merging all the files
X_panel <- merge(X_panel, health_1, all.x = TRUE, by = c("Patient_ID", "Health_Camp_ID"))
X_panel <- merge(X_panel, health_2, all.x = TRUE, by = c("Patient_ID", "Health_Camp_ID"))
X_panel <- merge(X_panel, health_3, all.x = TRUE, by = c("Patient_ID", "Health_Camp_ID"))
X_panel <- merge(X_panel, health_camp, all.x = TRUE, by = "Health_Camp_ID")
X_panel <- merge(X_panel, patient, all.x = TRUE, by = "Patient_ID")
# creating target variable
X_panel[, target := 0]
X_panel$target[X_panel$Category1 != "Third" & (X_panel$Health_Score_1 > 0 | X_panel$Health_Score_2 > 0)] <- 1
X_panel$target[X_panel$Category1 == "Third" & X_panel$Number_of_stall_visited > 0] <- 1
# basic feature engineering
X_panel[, ":="(Registration_Date = as.Date(Registration_Date, "%d-%b-%y"),
Camp_Start_Date = as.Date(Camp_Start_Date, "%d-%b-%y"),
Camp_End_Date = as.Date(Camp_End_Date, "%d-%b-%y"),
Category1 = as.numeric(as.factor(Category1)),
Category2 = as.numeric(as.factor(Category2)),
City_Type = as.numeric(as.factor(City_Type)),
Income = as.numeric(as.factor(Income)),
Education_Score = as.numeric(Education_Score),
Age = as.numeric(Age))]
setorder(X_panel, Patient_ID, Registration_Date)
X_panel$order <- seq(1, nrow(X_panel))
X_date <- X_panel[, c("Patient_ID", "Registration_Date", "order"), with = FALSE]
X_date$order <- X_date$order + 1
names(X_date)[2] <- "Prev_Date"
X_panel <- merge(X_panel, X_date, all.x = TRUE, by = c("Patient_ID", "order"))
X_date$order <- X_date$order - 2
names(X_date)[2] <- "Next_Date"
X_panel <- merge(X_panel, X_date, all.x = TRUE, by = c("Patient_ID", "order"))
# various date differences
X_panel[, ":="(Start_Date_Diff = as.numeric(Registration_Date - Camp_Start_Date),
End_Date_Diff = as.numeric(Camp_End_Date - Registration_Date),
Prev_Date_Diff = as.numeric(Registration_Date - Prev_Date),
Next_Date_Diff = as.numeric(Registration_Date - Next_Date),
Camp_Start_Year = year(Camp_Start_Date))]
X_panel <- X_panel[Camp_Start_Year >= 2005]
X_panel <- X_panel[!is.na(Registration_Date)]
X_panel <- X_panel[Category3 == 2]
# count features
X_patient <- X_panel[, .(Count_Patient = .N), .(Patient_ID)]
X_panel <- merge(X_panel, X_patient, by = "Patient_ID")
X_patient_date <- X_panel[, .(Count_Patient_Date = .N), .(Patient_ID, Registration_Date)]
X_panel <- merge(X_panel, X_patient_date, by = c("Patient_ID", "Registration_Date"))
# binary tag for patients who have donated in the past
X_donation <- X_panel[Donation > 0, .(Min_Date_Donation = min(Registration_Date)), .(Patient_ID)]
X_panel <- merge(X_panel, X_donation, all.x = T, by = "Patient_ID")
X_panel[, Donation_Flag := ifelse(is.na(Min_Date_Donation), 0, ifelse(Registration_Date > Min_Date_Donation, 1, 0))]
X_train <- X_panel[train_flag == 1]
X_test <- X_panel[train_flag == 0]
X_features <- c("Count_Patient", "Count_Patient_Date", "Donation_Flag",
"City_Type", "Income", "Education_Score", "Age",
"Category1", "Category2",
"Start_Date_Diff", "End_Date_Diff", "Prev_Date_Diff", "Next_Date_Diff")
X_target <- X_train$target
xgtrain <- xgb.DMatrix(data = as.matrix(X_train[, X_features, with = FALSE]), label = X_target, missing = NA)
xgtest <- xgb.DMatrix(data = as.matrix(X_test[, X_features, with = FALSE]), missing = NA)
sapply(X_train,class)
summary(X_train$Donation_Flag)
table(X_train$Donation_Flag)
head(X_train$Donation_Flag)
summary(X_train)
head(health_camp)
train <- fread("../RAW/Train.csv")
test <- fread("../RAW/Test_D7W1juQ.csv")
health_camp <- fread("../RAW/Health_Camp_Detail.csv")
health_1 <- fread("../RAW/First_Health_Camp_Attended.csv")
health_2 <- fread("../RAW/Second_Health_Camp_Attended.csv")
health_3 <- fread("../RAW/Third_Health_Camp_Attended.csv")
health_1[, V5 := NULL]
setnames(health_1, "Health_Score", "Health_Score_1")
setnames(health_2, "Health Score", "Health_Score_2")
patient <- fread("../RAW/Patient_Profile.csv")
train[, train_flag := 1]
test[, train_flag := 0]
X_panel <- rbind(train, test)
# merging all the files
X_panel <- merge(X_panel, health_1, all.x = TRUE, by = c("Patient_ID", "Health_Camp_ID"))
X_panel <- merge(X_panel, health_2, all.x = TRUE, by = c("Patient_ID", "Health_Camp_ID"))
X_panel <- merge(X_panel, health_3, all.x = TRUE, by = c("Patient_ID", "Health_Camp_ID"))
X_panel <- merge(X_panel, health_camp, all.x = TRUE, by = "Health_Camp_ID")
X_panel <- merge(X_panel, patient, all.x = TRUE, by = "Patient_ID")
# creating target variable
X_panel[, target := 0]
X_panel$target[X_panel$Category1 != "Third" & (X_panel$Health_Score_1 > 0 | X_panel$Health_Score_2 > 0)] <- 1
X_panel$target[X_panel$Category1 == "Third" & X_panel$Number_of_stall_visited > 0] <- 1
# basic feature engineering
X_panel[, ":="(Registration_Date = as.Date(Registration_Date),
Camp_Start_Date = as.Date(Camp_Start_Date),
Camp_End_Date = as.Date(Camp_End_Date),
Category1 = as.numeric(as.factor(Category1)),
Category2 = as.numeric(as.factor(Category2)),
City_Type = as.numeric(as.factor(City_Type)),
Income = as.numeric(as.factor(Income)),
Education_Score = as.numeric(Education_Score),
Age = as.numeric(Age))]
summary)X_panel
summary(X_panel)
setorder(X_panel, Patient_ID, Registration_Date)
X_panel$order <- seq(1, nrow(X_panel))
X_date <- X_panel[, c("Patient_ID", "Registration_Date", "order"), with = FALSE]
X_date$order <- X_date$order + 1
names(X_date)[2] <- "Prev_Date"
X_panel <- merge(X_panel, X_date, all.x = TRUE, by = c("Patient_ID", "order"))
X_date$order <- X_date$order - 2
names(X_date)[2] <- "Next_Date"
X_panel <- merge(X_panel, X_date, all.x = TRUE, by = c("Patient_ID", "order"))
# various date differences
X_panel[, ":="(Start_Date_Diff = as.numeric(Registration_Date - Camp_Start_Date),
End_Date_Diff = as.numeric(Camp_End_Date - Registration_Date),
Prev_Date_Diff = as.numeric(Registration_Date - Prev_Date),
Next_Date_Diff = as.numeric(Registration_Date - Next_Date),
Camp_Start_Year = year(Camp_Start_Date))]
# subsetting data
X_panel <- X_panel[Camp_Start_Year >= 2005]
X_panel <- X_panel[!is.na(Registration_Date)]
X_panel <- X_panel[Category3 == 2]
X_patient <- X_panel[, .(Count_Patient = .N), .(Patient_ID)]
X_panel <- merge(X_panel, X_patient, by = "Patient_ID")
X_patient_date <- X_panel[, .(Count_Patient_Date = .N), .(Patient_ID, Registration_Date)]
X_panel <- merge(X_panel, X_patient_date, by = c("Patient_ID", "Registration_Date"))
# binary tag for patients who have donated in the past
X_donation <- X_panel[Donation > 0, .(Min_Date_Donation = min(Registration_Date)), .(Patient_ID)]
X_panel <- merge(X_panel, X_donation, all.x = T, by = "Patient_ID")
X_panel[, Donation_Flag := ifelse(is.na(Min_Date_Donation), 0, ifelse(Registration_Date > Min_Date_Donation, 1, 0))]
X_train <- X_panel[train_flag == 1]
X_test <- X_panel[train_flag == 0]
X_features <- c("Count_Patient", "Count_Patient_Date", "Donation_Flag",
"City_Type", "Income", "Education_Score", "Age",
"Category1", "Category2",
"Start_Date_Diff", "End_Date_Diff", "Prev_Date_Diff", "Next_Date_Diff")
X_target <- X_train$target
summary(X_train)
xgtrain <- xgb.DMatrix(data = as.matrix(X_train[, X_features, with = FALSE]), label = X_target, missing = NA)
xgtest <- xgb.DMatrix(data = as.matrix(X_test[, X_features, with = FALSE]), missing = NA)
train.orig = copy(X_train)
dates = sort(unique(X_train$Camp_Start_Date))
X_val <- X_train[Camp_Start_Date %in% dates[31:40],]
X_train <- X_train[Camp_Start_Date %in% dates[1:30],]
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
X_target <- X_train$target
X_valtarget <- X_val$target
xgtrain <- xgb.DMatrix(data = as.matrix(X_train[, X_features, with = FALSE]), label = X_target, missing = NA)
xgtest <- xgb.DMatrix(data = as.matrix(X_test[, X_features, with = FALSE]), label = X_valtarget, missing = NA)
xgtest <- xgb.DMatrix(data = as.matrix(X_val[, X_features, with = FALSE]), label = X_valtarget, missing = NA)
summary(X_val)
dates
dim(train.orig)
X_train = copy(train.orig)
train <- fread("../RAW/Train.csv")
test <- fread("../RAW/Test_D7W1juQ.csv")
health_camp <- fread("../RAW/Health_Camp_Detail.csv")
health_1 <- fread("../RAW/First_Health_Camp_Attended.csv")
health_2 <- fread("../RAW/Second_Health_Camp_Attended.csv")
health_3 <- fread("../RAW/Third_Health_Camp_Attended.csv")
health_1[, V5 := NULL]
setnames(health_1, "Health_Score", "Health_Score_1")
setnames(health_2, "Health Score", "Health_Score_2")
patient <- fread("../RAW/Patient_Profile.csv")
train[, train_flag := 1]
test[, train_flag := 0]
X_panel <- rbind(train, test)
# merging all the files
X_panel <- merge(X_panel, health_1, all.x = TRUE, by = c("Patient_ID", "Health_Camp_ID"))
X_panel <- merge(X_panel, health_2, all.x = TRUE, by = c("Patient_ID", "Health_Camp_ID"))
X_panel <- merge(X_panel, health_3, all.x = TRUE, by = c("Patient_ID", "Health_Camp_ID"))
X_panel <- merge(X_panel, health_camp, all.x = TRUE, by = "Health_Camp_ID")
X_panel <- merge(X_panel, patient, all.x = TRUE, by = "Patient_ID")
# creating target variable
X_panel[, target := 0]
X_panel$target[X_panel$Category1 != "Third" & (X_panel$Health_Score_1 > 0 | X_panel$Health_Score_2 > 0)] <- 1
X_panel$target[X_panel$Category1 == "Third" & X_panel$Number_of_stall_visited > 0] <- 1
# basic feature engineering
X_panel[, ":="(Registration_Date = as.Date(Registration_Date),
Camp_Start_Date = as.Date(Camp_Start_Date),
Camp_End_Date = as.Date(Camp_End_Date),
Category1 = as.numeric(as.factor(Category1)),
Category2 = as.numeric(as.factor(Category2)),
City_Type = as.numeric(as.factor(City_Type)),
Income = as.numeric(as.factor(Income)),
Education_Score = as.numeric(Education_Score),
Age = as.numeric(Age))]
# previous and next date for each patient
setorder(X_panel, Patient_ID, Registration_Date)
X_panel$order <- seq(1, nrow(X_panel))
X_date <- X_panel[, c("Patient_ID", "Registration_Date", "order"), with = FALSE]
X_date$order <- X_date$order + 1
names(X_date)[2] <- "Prev_Date"
X_panel <- merge(X_panel, X_date, all.x = TRUE, by = c("Patient_ID", "order"))
X_date$order <- X_date$order - 2
names(X_date)[2] <- "Next_Date"
X_panel <- merge(X_panel, X_date, all.x = TRUE, by = c("Patient_ID", "order"))
# various date differences
X_panel[, ":="(Start_Date_Diff = as.numeric(Registration_Date - Camp_Start_Date),
End_Date_Diff = as.numeric(Camp_End_Date - Registration_Date),
Prev_Date_Diff = as.numeric(Registration_Date - Prev_Date),
Next_Date_Diff = as.numeric(Registration_Date - Next_Date),
Camp_Start_Year = year(Camp_Start_Date))]
X_panel <- X_panel[!is.na(Registration_Date)]
X_panel <- X_panel[Category3 == 2]
# count features
X_patient <- X_panel[, .(Count_Patient = .N), .(Patient_ID)]
X_panel <- merge(X_panel, X_patient, by = "Patient_ID")
X_patient_date <- X_panel[, .(Count_Patient_Date = .N), .(Patient_ID, Registration_Date)]
X_panel <- merge(X_panel, X_patient_date, by = c("Patient_ID", "Registration_Date"))
# binary tag for patients who have donated in the past
X_donation <- X_panel[Donation > 0, .(Min_Date_Donation = min(Registration_Date)), .(Patient_ID)]
X_panel <- merge(X_panel, X_donation, all.x = T, by = "Patient_ID")
X_panel[, Donation_Flag := ifelse(is.na(Min_Date_Donation), 0, ifelse(Registration_Date > Min_Date_Donation, 1, 0))]
X_train <- X_panel[train_flag == 1]
X_test <- X_panel[train_flag == 0]
X_features <- c("Count_Patient", "Count_Patient_Date", "Donation_Flag",
"City_Type", "Income", "Education_Score", "Age",
"Category1", "Category2",
"Start_Date_Diff", "End_Date_Diff", "Prev_Date_Diff", "Next_Date_Diff")
train.orig = copy(X_train)
dates = sort(unique(X_train$Camp_Start_Date))
dates
X_val <- X_train[Camp_Start_Date %in% dates[28:37],]
X_train <- X_train[Camp_Start_Date %in% dates[1:27],]
X_target <- X_train$target
X_valtarget <- X_val$target
xgtrain <- xgb.DMatrix(data = as.matrix(X_train[, X_features, with = FALSE]), label = X_target, missing = NA)
xgtest <- xgb.DMatrix(data = as.matrix(X_val[, X_features, with = FALSE]), label = X_valtarget, missing = NA)
params <- list()
params$objective <- "binary:logistic"
params$eta <- 0.1
params$max_depth <- 5
params$subsample <- 0.9
params$colsample_bytree <- 0.9
params$min_child_weight <- 2
params$eval_metric <- "auc"
watchlist <- list(test = xgtest,train = xgtrain)
model_xgb <- xgb.train(params = params, xgtrain, nrounds = 100,
watchlist = watchlist, maximize = T, verbose = 2)
vimp <- xgb.importance(model = model_xgb, feature_names = X_features)
vimp
preds_xgb = predict(model_xgb,newdata = xgtest, ntreelimit=model_xgb$bestInd,
missing=111222333)
auc_xgb = auc(X_valtarget,preds_xgb)
print(auc_xgb)
?cut
cut(1:10,c(1,5,10))
library(glmnet)
install.packages("glmnet")
library(glmnet)
?glmnet
setwd("~/Documents/StudyWork/Kaggle/House_Pricing/CODES")
train = read.csv("../RAW/train.csv", header = TRUE)
train = read.csv("../RAW/train.csv", header = TRUE)
v <- data.frame(sapply(train,class))
head(v)
write.csv(v,file="Variable_Class.csv", row.names=FALSE)
write.csv(v,file="Variable_Class.csv")
drops=c('MoSoldQtrQ4','YearRemodeDecile(2007,2010]','YearBuiltCombinedOlder than 1900','SaleConditionPartial',
'SaleTypeWD','FenceNo Fence','PavedDriveY','GarageCondNo Garage','GarageCondTA','GarageQualTA','GarageQualNo Garage',
'GarageFinishNo Garage','FireplaceQuTA','FunctionalTyp','KitchenQualTA','GrLivArea','ElectricalSBrkr',
'CentralAirY','HeatingQCTA','HeatingWall','BsmtFinType2No Basement','BsmtFinType1No Basement','BsmtExposureNo Basement',
'BsmtCondNo Basement','FoundationWood','ExterCondPo','ExterQualTA','MasVnrTypeStone','Exterior2ndWd Shng',
'Exterior2ndCBlock','Exterior1stWdShing','RoofMatlWdShngl','RoofStyleShed','HouseStyleSLvl','BldgTypeTwnhsE',
'Condition1RRNn','NeighborhoodVeenker','LandSlopeSev','LotConfigInside','LandContourLvl','LotShapeReg','AlleyPave',
'MSZoningRM','BsmtFinType1Unf','BsmtQualTA','GarageFinishUnf','GarageTypeNo Garage','TotalBsmtSF','BsmtCondTA','MSSubClass190',
'Exterior1stAsphShn','BsmtExposureNo','HeatingFloor','HeatingQCPo','FunctionalSev','BldgTypeDuplex','BldgType2fmCon')
sort(drops)
