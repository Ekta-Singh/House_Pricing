test <- misc.features(dat=test)
# removing levels not present in test
train <- subset(train, RoofMatl %in% c("CompShg", "Tar&Grv", "WdShake", "WdShngl"))
train$RoofMatl <- as.factor(as.character(train$RoofMatl))
train <- subset(train, !(HouseStyle %in% c("2.5Fin")))
train$HouseStyle <- as.factor(as.character(train$HouseStyle))
train <- subset(train, !(Exterior1st %in% c("ImStucc","Stone")))
train$Exterior1st <- as.factor(as.character(train$Exterior1st))
train <- subset(train, !(Exterior2nd %in% c("Other")))
train$Exterior2nd <- as.factor(as.character(train$Exterior2nd))
train <- subset(train, !(Electrical %in% c("Mix")))
train$Electrical <- as.factor(as.character(train$Electrical))
train <- subset(train, !(GarageQual %in% c("Ex")))
train$GarageQual <- as.factor(as.character(train$GarageQual))
# Removing Columns
rmv.cols <- c("Street","Condition2", "MiscFeature", "BsmtFinSF2", "BsmtUnfSF",
"GarageYrBlt", 'PoolQC','PoolArea', "X2ndFlrSF", "YearRemodAdd",
"Utilities", 'MoSold','MSSubClass',"Heating")
dim(train);dim(test)
train[,(rmv.cols):=NULL]
test[,(rmv.cols):=NULL]
any(is.na(train))
any(is.na(test))
# Imputing Missing values in test
colnames(test)[unlist(lapply(colnames(test), function(x){any(is.na(test[,get(x)]))}))]
for(n in names(test_impute$imp)){
x = test_impute$imp[[n]][,1]
test[is.na(get(n)),(n):=x]
}
test$num_ext_materials <- ifelse(as.character(test$Exterior1st)==as.character(test$Exterior2nd),1,2)
test$Partial_Old <- ifelse(((test$SaleCondition=="Partial" | test$SaleCondition=="Abnorml") &
test$YearBuilt<=1990),1,0)
which(train$Time_Since_Remodel<0)
train[Time_Since_Remodel<0,AgeofHouse:=50]
train[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[Time_Since_Remodel<0,AgeofHouse:=50]
test[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[is.na(AgeofHouse), AgeofHouse:=2=50]
test[is.na(AgeofHouse), AgeofHouse:=50]
train[,YearBuilt:=NULL]
test[,YearBuilt:=NULL]
any(is.na(train))
any(is.na(test))
train_orig <- copy(train)
test_orig <- copy(test)
target = train$SalePrice
train[,SalePrice:=NULL]
fm <- formula(paste("~ ",paste(colnames(train),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = train, sep = NULL)
train <- predict(dummyObj,train)
train <- data.table(train)
train$SalePrice = target
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),0.3*nrow(train),replace = F)
val <- train[indx,]
train <- train[-indx,]
# train = subset(train,train$GrLivArea<=4000)
# drop.cols = c("BsmtCond","ExterCond","GarageCond")
# train <- subset(train,select = !(colnames(train)%in% drop.cols))
# val <- subset(val,select = !(colnames(val)%in% drop.cols))
dim(train); dim(val);
library(glmnet)
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, Id =NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, Id =NULL)]
grid=seq(1,0,-0.001)
set.seed(1)
ridge.mod=glmnet(as.matrix(x_train),y_train,alpha=1)
cv.out=cv.glmnet(as.matrix(x_train),y_train,alpha=1)
#plot(cv.out)
bestlam =cv.out$lambda.min #0.09013617
print(bestlam)
ridge.pred_test=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_val))
ridge.pred_train=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_train))
test_rmse_ridge=RMSE(log(y_val^2.5+1),log(ridge.pred_test^2.5+1),wt=1)
train_rmse_ridge=RMSE(log(y_train^2.5+1),log(ridge.pred_train^2.5+1),wt=1)
print(test_rmse_ridge)
print(train_rmse_ridge)
coef(cv.out)
summary(model)
val <- train_orig[indx,]
val$predicted_price = ridge.pred_test^2.5
train <- train_orig[-indx]
train$predicted_price = ridge.pred_train^2.5
sum(train$SalePrice)
sum(train$predicted_price)
diagnostics.model(dat = train, model = ridge.mod, new_dat = val)
train = read.csv("../RAW/train.csv", header = TRUE)
test = read.csv("../RAW/test.csv", header = TRUE)
source("./lib.R")
train <- treat.missing.values(dat=train)
test <- treat.missing.values(dat=test)
# Binning some numeric variables and dropping the original cols
train$HouseStyle <- as.factor(train$HouseStyle)
test$HouseStyle <- as.factor(test$HouseStyle)
train <- data.table(train)
test <- data.table(test)
train <- bin.variables(dat=train)
test <- bin.variables(dat=test)
train <- misc.features(dat=train)
test <- misc.features(dat=test)
# removing levels not present in test
train <- subset(train, RoofMatl %in% c("CompShg", "Tar&Grv", "WdShake", "WdShngl"))
train$RoofMatl <- as.factor(as.character(train$RoofMatl))
train <- subset(train, !(HouseStyle %in% c("2.5Fin")))
train$HouseStyle <- as.factor(as.character(train$HouseStyle))
train <- subset(train, !(Exterior1st %in% c("ImStucc","Stone")))
train$Exterior1st <- as.factor(as.character(train$Exterior1st))
train <- subset(train, !(Exterior2nd %in% c("Other")))
train$Exterior2nd <- as.factor(as.character(train$Exterior2nd))
train <- subset(train, !(Electrical %in% c("Mix")))
train$Electrical <- as.factor(as.character(train$Electrical))
train <- subset(train, !(GarageQual %in% c("Ex")))
train$GarageQual <- as.factor(as.character(train$GarageQual))
# Removing Columns
rmv.cols <- c("Street","Condition2", "MiscFeature", "BsmtFinSF2", "BsmtUnfSF",
"GarageYrBlt", 'PoolQC','PoolArea', "X2ndFlrSF", "YearRemodAdd",
"Utilities", 'MoSold','MSSubClass',"Heating","OverallCond")
dim(train);dim(test)
train[,(rmv.cols):=NULL]
test[,(rmv.cols):=NULL]
any(is.na(train))
any(is.na(test))
for(n in names(test_impute$imp)){
x = test_impute$imp[[n]][,1]
test[is.na(get(n)),(n):=x]
}
test$num_ext_materials <- ifelse(as.character(test$Exterior1st)==as.character(test$Exterior2nd),1,2)
test$Partial_Old <- ifelse(((test$SaleCondition=="Partial" | test$SaleCondition=="Abnorml") &
test$YearBuilt<=1990),1,0)
train[Time_Since_Remodel<0,AgeofHouse:=50]
train[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[Time_Since_Remodel<0,AgeofHouse:=50]
test[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[is.na(AgeofHouse), AgeofHouse:=25]
train[,YearBuilt:=NULL]
test[,YearBuilt:=NULL]
tail(colnames(train))
train_orig <- copy(train)
test_orig <- copy(test)
target = train$SalePrice
train[,SalePrice:=NULL]
fm <- formula(paste("~ ",paste(colnames(train),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = train, sep = NULL)
train <- predict(dummyObj,train)
train <- data.table(train)
train$SalePrice = target
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),0.3*nrow(train),replace = F)
val <- train[indx,]
train <- train[-indx,]
summary(model)
library(glmnet)
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, Id =NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, Id =NULL)]
grid=seq(1,0,-0.001)
set.seed(1)
ridge.mod=glmnet(as.matrix(x_train),y_train,alpha=1)
cv.out=cv.glmnet(as.matrix(x_train),y_train,alpha=1)
#plot(cv.out)
bestlam =cv.out$lambda.min #0.09013617
print(bestlam)
ridge.pred_test=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_val))
ridge.pred_train=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_train))
test_rmse_ridge=RMSE(log(y_val^2.5+1),log(ridge.pred_test^2.5+1),wt=1)
train_rmse_ridge=RMSE(log(y_train^2.5+1),log(ridge.pred_train^2.5+1),wt=1)
print(test_rmse_ridge)
print(train_rmse_ridge)
val <- train_orig[indx,]
val$predicted_price = ridge.pred_test^2.5
train <- train_orig[-indx]
train$predicted_price = ridge.pred_train^2.5
sum(train$predicted_price)
diagnostics.model(dat = train, model = ridge.mod, new_dat = val)
train = read.csv("../RAW/train.csv", header = TRUE)
test = read.csv("../RAW/test.csv", header = TRUE)
source("./lib.R")
train$HouseStyle <- as.factor(train$HouseStyle)
test$HouseStyle <- as.factor(test$HouseStyle)
train <- data.table(train)
test <- data.table(test)
train <- bin.variables(dat=train)
test <- bin.variables(dat=test)
train <- misc.features(dat=train)
test <- misc.features(dat=test)
# removing levels not present in test
train <- subset(train, RoofMatl %in% c("CompShg", "Tar&Grv", "WdShake", "WdShngl"))
train$RoofMatl <- as.factor(as.character(train$RoofMatl))
train <- subset(train, !(HouseStyle %in% c("2.5Fin")))
train$HouseStyle <- as.factor(as.character(train$HouseStyle))
train <- subset(train, !(Exterior1st %in% c("ImStucc","Stone")))
train$Exterior1st <- as.factor(as.character(train$Exterior1st))
train <- subset(train, !(Exterior2nd %in% c("Other")))
train$Exterior2nd <- as.factor(as.character(train$Exterior2nd))
train <- subset(train, !(Electrical %in% c("Mix")))
train$Electrical <- as.factor(as.character(train$Electrical))
train <- subset(train, !(GarageQual %in% c("Ex")))
train$GarageQual <- as.factor(as.character(train$GarageQual))
dim(train)
sum(train$num_excellents)
train = read.csv("../RAW/train.csv", header = TRUE)
test = read.csv("../RAW/test.csv", header = TRUE)
source("./lib.R")
train <- treat.missing.values(dat=train)
test <- treat.missing.values(dat=test)
# Binning some numeric variables and dropping the original cols
train$HouseStyle <- as.factor(train$HouseStyle)
test$HouseStyle <- as.factor(test$HouseStyle)
train <- data.table(train)
test <- data.table(test)
train <- bin.variables(dat=train)
test <- bin.variables(dat=test)
train <- misc.features(dat=train)
test <- misc.features(dat=test)
# removing levels not present in test
train <- subset(train, RoofMatl %in% c("CompShg", "Tar&Grv", "WdShake", "WdShngl"))
train$RoofMatl <- as.factor(as.character(train$RoofMatl))
train <- subset(train, !(HouseStyle %in% c("2.5Fin")))
train$HouseStyle <- as.factor(as.character(train$HouseStyle))
train <- subset(train, !(Exterior1st %in% c("ImStucc","Stone")))
train$Exterior1st <- as.factor(as.character(train$Exterior1st))
train <- subset(train, !(Exterior2nd %in% c("Other")))
train$Exterior2nd <- as.factor(as.character(train$Exterior2nd))
train <- subset(train, !(Electrical %in% c("Mix")))
train$Electrical <- as.factor(as.character(train$Electrical))
train <- subset(train, !(GarageQual %in% c("Ex")))
train$GarageQual <- as.factor(as.character(train$GarageQual))
sum(train$num_excellents)
ss <- apply(train[,cols.ratings,with=F],1, function(x) length(which(x=="Ex")))
cols.ratings <- c("ExterQual","ExterCond","BsmtQual", "BsmtCond", "HeatingQC", "KitchenQual",
"FireplaceQu","GarageQual", "GarageCond")
cols.ratings <- c("ExterQual","ExterCond","BsmtQual", "BsmtCond", "HeatingQC", "KitchenQual",
ss <- apply(train[,cols.ratings,with=F],1, function(x) length(which(x=="Ex")))
summary(ss)
length(which(ss>=3))
length(which(ss>=2))
train = read.csv("../RAW/train.csv", header = TRUE)
test = read.csv("../RAW/test.csv", header = TRUE)
source("./lib.R")
train <- treat.missing.values(dat=train)
test <- treat.missing.values(dat=test)
# Binning some numeric variables and dropping the original cols
train$HouseStyle <- as.factor(train$HouseStyle)
test$HouseStyle <- as.factor(test$HouseStyle)
train <- data.table(train)
test <- data.table(test)
train <- bin.variables(dat=train)
test <- bin.variables(dat=test)
train <- misc.features(dat=train)
test <- misc.features(dat=test)
# removing levels not present in test
train <- subset(train, RoofMatl %in% c("CompShg", "Tar&Grv", "WdShake", "WdShngl"))
train$RoofMatl <- as.factor(as.character(train$RoofMatl))
train <- subset(train, !(HouseStyle %in% c("2.5Fin")))
train$HouseStyle <- as.factor(as.character(train$HouseStyle))
train <- subset(train, !(Exterior1st %in% c("ImStucc","Stone")))
train$Exterior1st <- as.factor(as.character(train$Exterior1st))
train <- subset(train, !(Exterior2nd %in% c("Other")))
train$Exterior2nd <- as.factor(as.character(train$Exterior2nd))
train <- subset(train, !(Electrical %in% c("Mix")))
train$Electrical <- as.factor(as.character(train$Electrical))
train <- subset(train, !(GarageQual %in% c("Ex")))
train$GarageQual <- as.factor(as.character(train$GarageQual))
train[,list(m = mean(SalePrice)),by=num_excellents]
sum(train$num_excellents)
train = read.csv("../RAW/train.csv", header = TRUE)
test = read.csv("../RAW/test.csv", header = TRUE)
source("./lib.R")
train <- treat.missing.values(dat=train)
test <- treat.missing.values(dat=test)
# Binning some numeric variables and dropping the original cols
train$HouseStyle <- as.factor(train$HouseStyle)
test$HouseStyle <- as.factor(test$HouseStyle)
train <- data.table(train)
test <- data.table(test)
train <- bin.variables(dat=train)
test <- bin.variables(dat=test)
ss <- apply(train[,cols.ratings,with=F],1, function(x) length(which(x=="Ex")))
sum(ss)
head(ss)
length(which(ss>=3))
source("./lib.R")
train <- misc.features(dat=train)
test <- misc.features(dat=test)
sum(train$num_excellents)
train <- subset(train, RoofMatl %in% c("CompShg", "Tar&Grv", "WdShake", "WdShngl"))
train$RoofMatl <- as.factor(as.character(train$RoofMatl))
train <- subset(train, !(HouseStyle %in% c("2.5Fin")))
train$HouseStyle <- as.factor(as.character(train$HouseStyle))
train <- subset(train, !(Exterior1st %in% c("ImStucc","Stone")))
train$Exterior1st <- as.factor(as.character(train$Exterior1st))
train <- subset(train, !(Exterior2nd %in% c("Other")))
train$Exterior2nd <- as.factor(as.character(train$Exterior2nd))
train <- subset(train, !(Electrical %in% c("Mix")))
train$Electrical <- as.factor(as.character(train$Electrical))
train <- subset(train, !(GarageQual %in% c("Ex")))
train$GarageQual <- as.factor(as.character(train$GarageQual))
sum(train$num_excellents)
rmv.cols <- c("Street","Condition2", "MiscFeature", "BsmtFinSF2", "BsmtUnfSF",
"GarageYrBlt", 'PoolQC','PoolArea', "X2ndFlrSF", "YearRemodAdd",
"Utilities", 'MoSold','MSSubClass',"Heating","OverallCond")
dim(train);dim(test)
train[,(rmv.cols):=NULL]
test[,(rmv.cols):=NULL]
any(is.na(train))
any(is.na(test))
# Imputing Missing values in test
colnames(test)[unlist(lapply(colnames(test), function(x){any(is.na(test[,get(x)]))}))]
for(n in names(test_impute$imp)){
x = test_impute$imp[[n]][,1]
test[is.na(get(n)),(n):=x]
}
test$num_ext_materials <- ifelse(as.character(test$Exterior1st)==as.character(test$Exterior2nd),1,2)
test$Partial_Old <- ifelse(((test$SaleCondition=="Partial" | test$SaleCondition=="Abnorml") &
test$YearBuilt<=1990),1,0)
train[Time_Since_Remodel<0,AgeofHouse:=50]
train[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[Time_Since_Remodel<0,AgeofHouse:=50]
test[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[is.na(AgeofHouse), AgeofHouse:=25]
train[,YearBuilt:=NULL]
test[,YearBuilt:=NULL]
train_orig <- copy(train)
test_orig <- copy(test)
target = train$SalePrice
train[,SalePrice:=NULL]
fm <- formula(paste("~ ",paste(colnames(train),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = train, sep = NULL)
train <- predict(dummyObj,train)
train <- data.table(train)
train$SalePrice = target
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),0.3*nrow(train),replace = F)
val <- train[indx,]
train <- train[-indx,]
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, Id =NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, Id =NULL)]
grid=seq(1,0,-0.001)
set.seed(1)
ridge.mod=glmnet(as.matrix(x_train),y_train,alpha=1)
cv.out=cv.glmnet(as.matrix(x_train),y_train,alpha=1)
#plot(cv.out)
bestlam =cv.out$lambda.min #0.09013617
print(bestlam)
tail(colnames(x_train))
ridge.pred_test=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_val))
ridge.pred_train=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_train))
test_rmse_ridge=RMSE(log(y_val^2.5+1),log(ridge.pred_test^2.5+1),wt=1)
train_rmse_ridge=RMSE(log(y_train^2.5+1),log(ridge.pred_train^2.5+1),wt=1)
print(test_rmse_ridge)
print(train_rmse_ridge)
tail(coef(cv.out))
train = read.csv("../RAW/train.csv", header = TRUE)
test = read.csv("../RAW/test.csv", header = TRUE)
source("./lib.R")
train <- treat.missing.values(dat=train)
test <- treat.missing.values(dat=test)
# Binning some numeric variables and dropping the original cols
train$HouseStyle <- as.factor(train$HouseStyle)
test$HouseStyle <- as.factor(test$HouseStyle)
train <- data.table(train)
test <- data.table(test)
train <- bin.variables(dat=train)
test <- bin.variables(dat=test)
train <- misc.features(dat=train)
test <- misc.features(dat=test)
train <- subset(train, RoofMatl %in% c("CompShg", "Tar&Grv", "WdShake", "WdShngl"))
train$RoofMatl <- as.factor(as.character(train$RoofMatl))
train <- subset(train, !(HouseStyle %in% c("2.5Fin")))
train$HouseStyle <- as.factor(as.character(train$HouseStyle))
train <- subset(train, !(Exterior1st %in% c("ImStucc","Stone")))
train$Exterior1st <- as.factor(as.character(train$Exterior1st))
train <- subset(train, !(Exterior2nd %in% c("Other")))
train$Exterior2nd <- as.factor(as.character(train$Exterior2nd))
train <- subset(train, !(Electrical %in% c("Mix")))
train$Electrical <- as.factor(as.character(train$Electrical))
train <- subset(train, !(GarageQual %in% c("Ex")))
train$GarageQual <- as.factor(as.character(train$GarageQual))
train[,list(m=mean(SalePrice)),by=num_excellents]
lengtH(ss)
length(ss)
summary(ss)
length(which(ss>=3))
length(which(ss>=5))
length(which(ss>=4))
rmv.cols <- c("Street","Condition2", "MiscFeature", "BsmtFinSF2", "BsmtUnfSF",
"GarageYrBlt", 'PoolQC','PoolArea', "X2ndFlrSF", "YearRemodAdd",
"Utilities", 'MoSold','MSSubClass',"Heating","OverallCond")
dim(train);dim(test)
train[,(rmv.cols):=NULL]
test[,(rmv.cols):=NULL]
any(is.na(train))
any(is.na(test))
for(n in names(test_impute$imp)){
x = test_impute$imp[[n]][,1]
test[is.na(get(n)),(n):=x]
}
test$num_ext_materials <- ifelse(as.character(test$Exterior1st)==as.character(test$Exterior2nd),1,2)
test$Partial_Old <- ifelse(((test$SaleCondition=="Partial" | test$SaleCondition=="Abnorml") &
test$YearBuilt<=1990),1,0)
train[Time_Since_Remodel<0,AgeofHouse:=50]
train[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[Time_Since_Remodel<0,AgeofHouse:=50]
test[Time_Since_Remodel<0,Time_Since_Remodel:=25]
test[is.na(AgeofHouse), AgeofHouse:=25]
train[,YearBuilt:=NULL]
test[,YearBuilt:=NULL]
train_orig <- copy(train)
test_orig <- copy(test)
target = train$SalePrice
train[,SalePrice:=NULL]
fm <- formula(paste("~ ",paste(colnames(train),collapse = "+"), sep = ""))
dummyObj = dummyVars(formula = fm, data = train, sep = NULL)
train <- predict(dummyObj,train)
train <- data.table(train)
train$SalePrice = target
model=lm(SalePrice~.,subset(train,select = c(-Id)))
cols_to_keep <- gsub("`","",rownames(summary(model)$coeff))
cols_to_keep <- cols_to_keep[-1]
train <- subset(train, select = c(cols_to_keep,"SalePrice"))
set.seed(123)
indx = sample(1:nrow(train),0.3*nrow(train),replace = F)
val <- train[indx,]
train <- train[-indx,]
y_train <- log(train[["SalePrice"]]+1)
y_train <- train[["SalePrice"]]^0.4
x_train = copy(train)
x_train[,":="(SalePrice=NULL, Id =NULL)]
y_val <- log(val[["SalePrice"]]+1)
y_val <- val[["SalePrice"]]^0.4
x_val = copy(val)
x_val[,":="(SalePrice=NULL, Id =NULL)]
grid=seq(1,0,-0.001)
set.seed(1)
ridge.mod=glmnet(as.matrix(x_train),y_train,alpha=1)
cv.out=cv.glmnet(as.matrix(x_train),y_train,alpha=1)
#plot(cv.out)
bestlam =cv.out$lambda.min #0.09013617
print(bestlam)
tail(coef(cv.out))
ridge.pred_test=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_val))
ridge.pred_train=predict (ridge.mod ,s=bestlam ,newx=as.matrix(x_train))
test_rmse_ridge=RMSE(log(y_val^2.5+1),log(ridge.pred_test^2.5+1),wt=1)
train_rmse_ridge=RMSE(log(y_train^2.5+1),log(ridge.pred_train^2.5+1),wt=1)
print(test_rmse_ridge)
print(train_rmse_ridge)
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 1000, importance = T,
nodesize = 5, keep.forest = T, mtry = 200,
strata = "GrLivArea_bin")
library(randomForest)
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 1000, importance = T,
nodesize = 5, keep.forest = T, mtry = 200,
strata = "GrLivArea_bin")
preds_rf_test = predict(model_rf,newdata = x_val,type="response")
rmse_rf_test = RMSE(y_val,preds_rf_test,wt=1)
preds_rf_train = predict(model_rf,newdata = x_train,type="response")
rmse_rf_train = RMSE(y_train,preds_rf_train,wt=1)
print(rmse_rf_test)
print(rmse_rf_train)
summary(y_train)
model_rf = randomForest(x=x_train,y=y_train,xtest = x_val,ytest = y_val,
ntree = 1000, importance = T,
nodesize = 5, keep.forest = T, mtry = 200)
preds_rf_test = predict(model_rf,newdata = x_val,type="response")
rmse_rf_test = RMSE(y_val,preds_rf_test,wt=1)
preds_rf_train = predict(model_rf,newdata = x_train,type="response")
rmse_rf_train = RMSE(y_train,preds_rf_train,wt=1)
print(rmse_rf_test)
print(rmse_rf_train)
preds_rf_test = predict(model_rf,newdata = x_val,type="response")
rmse_rf_test = RMSE(log(y_val^2.5+1),log(preds_rf_test^2.5+1),wt=1)
preds_rf_train = predict(model_rf,newdata = x_train,type="response")
rmse_rf_train = RMSE(log(y_train^2.5+1),log(preds_rf_train^2.5+1),wt=1)
print(rmse_rf_test)
print(rmse_rf_train)
val <- train_orig[indx,]
val$predicted_price = preds_rf_test^2.5
train <- train_orig[-indx]
train$predicted_price = preds_rf_train^2.5
diagnostics.model(dat = train, model = ridge.mod, new_dat = val)
sum(train$predicted_price)
