A=data.frame(x=c(1:6),y=c(1,1,1,2,2,2),z=c(1,1,2,2,2,2))
A
split(A,f = paste0(A$y,A$z))
class(split(A,f = paste0(A$y,A$z)))
dm(val)
dim(val)
setwd("~/Documents/StudyWork/Kaggle/House_Pricing/CODES")
val = read.csv("../DERIVED/validation.csv")
library(data.table)
library(datatable)
library(data.table)
library(dplyr)
library(data.table)
setwd("C:/Users/system5/Documents/StudyWork/Kaggle/House_Pricing/CODES/")
train = read.csv("../RAW/train.csv", header = TRUE)
test = read.csv("../RAW/test.csv", header = TRUE)
source("./lib.R")
install.packages("data.table")
install.packages("dplyr")
install.packages("xgboost")
library(dplyr)
library(data.table)
setwd("C:/Users/system5/Documents/StudyWork/Kaggle/House_Pricing/CODES/")
train = read.csv("../RAW/train.csv", header = TRUE)
test = read.csv("../RAW/test.csv", header = TRUE)
source("./lib.R")
train <- treat.missing.values(dat=train)
test <- treat.missing.values(dat=test)
train$MSSubClass <- as.factor(train$MSSubClass)
test$MSSubClass <- as.factor(test$MSSubClass)
train <- data.table(train)
test <- data.table(test)
train <- bin.variables(dat=train)
test <- bin.variables(dat=test)
rmv.cols <- c("Id", "Street","Condition2", "YearBuilt", "MiscFeature", "GarageYrBlt",
'PoolQC','PoolArea',"YearRemodAdd", "Utilities")
dim(train);dim(test)
train[,(rmv.cols):=NULL]
test[,(rmv.cols):=NULL]
any(is.na(train))
any(is.na(test))
# Merging levels
train <- combine.levels(dat=train)
test <- combine.levels(dat=test)
train_orig <- copy(train)
set.seed(123)
indx = sample(1:nrow(train),0.3*nrow(train),replace = F)
val <- train[indx,]
train <- train[-indx,]
drop.cols = c("BsmtCond","ExterCond","GarageCond")
train <- subset(train,select = !(colnames(train)%in% drop.cols))
val <- subset(val,select = !(colnames(val)%in% drop.cols))
y_train <- log(train[["SalePrice"]]+1)
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,SalePrice:=NULL]
y_val <- log(val[["SalePrice"]]+1)
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,SalePrice:=NULL]
param <- list(max_depth = 6,
eta = 0.01,
silent = 1,
objective="reg:linear",
eval_metric="rmse",
# subsample = 0.75,
min_child_weight = 10,
colsample_bytree = 0.5,
base_score =0)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 1000,
params = param, verbose = 0)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
rmse_xgb = RMSE(y_val,preds_xgb,wt=1)
print(rmse_xgb)
preds_xgb_train = predict(model_xgb,newdata = as.matrix(x_train))
rmse_xgb_train = RMSE(y_train,preds_xgb_train,wt=1)
print(rmse_xgb_train)
library(xgboost)
y_train <- log(train[["SalePrice"]]+1)
x_train = copy(train)
cols.fac <- names(which(sapply(train,class)=="factor"))
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_train[,SalePrice:=NULL]
y_val <- log(val[["SalePrice"]]+1)
x_val = copy(val)
x_val <- x_val[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_val[,SalePrice:=NULL]
param <- list(max_depth = 6,
eta = 0.01,
silent = 1,
objective="reg:linear",
eval_metric="rmse",
# subsample = 0.75,
min_child_weight = 10,
colsample_bytree = 0.5,
base_score =0)
model_xgb <- xgboost(data=as.matrix(x_train),label = y_train, nrounds = 1000,
params = param, verbose = 0)
imp_xgb = xgb.importance(model = model_xgb, feature_names = colnames(x_train))
head(imp_xgb)
imp_xgb$Feature[1:20]
write.csv(imp_xgb, file = "../MODEL/imp_xgb.csv", row.names=F)
preds_xgb = predict(model_xgb,newdata = as.matrix(x_val))
rmse_xgb = RMSE(y_val,preds_xgb,wt=1)
print(rmse_xgb)
preds_xgb_train = predict(model_xgb,newdata = as.matrix(x_train))
rmse_xgb_train = RMSE(y_train,preds_xgb_train,wt=1)
print(rmse_xgb_train)
train[,predicted_price:=(exp(preds_xgb_train)-1)]
val[,predicted_price:= (exp(preds_xgb)-1)]
diagnostics.model(dat = train, model = model_xgb,
new_dat = val)
install.packages("ggplot2")
library(ggplot2)
diagnostics.model(dat = train, model = model_xgb,
new_dat = val)
source("lib.R")
diagnostics.model(dat = train, model = model_xgb,
new_dat = val)
quantile(train$SalePrice,0.95)
rmse_xgb_train = RMSE(train$SalePrice,train$predicted_price,wt=1)
rmse_xgb_train
diagnostics.model(dat = train, model = model_xgb,
new_dat = val)
dat = train
model = model_xgb
new_dat = copy(val)
dat = copy(train)
df <- subset(new_dat, select=c("SalePrice","predicted_price"))
ret = genPlots(df, NULL, "Test data: Predicted vs Actuals")
ret
df2 <- subset(dat, select=c("SalePrice","predicted_price"))
ret = genPlots(df2, NULL, "Train data: Predicted vs Actuals")
ret
diagnostics.model(dat = train, model = model_xgb,
new_dat = val)
rm(dat)
dim(train)
dim(val)
rm(df)
rm(Df2)
rm(df2)
rm(new_dat)
diagnostics.model(dat = copy(train), model = model_xgb,
new_dat = copy(val))
source("lib.R")
diagnostics.model(dat = train, model = model_xgb,
new_dat = val)
diagnostics.model(dat = train, model = model_xgb,
new_dat = val)
options(scipen=999)
diagnostics.model(dat = train, model = model_xgb,
new_dat = val)
