librar(data.table)
library(data.table)
library(ggplot2)
library(Rcpp)
install.packages("ggplot2")
library(ggplot2)
?seq
seq(0,0,10)
seq(0,1,10)
rep(0,10)
library(RSelenium)
library(XML)
library(magrittr)
library(lubridate)
library(utils)
library(data.table)
library(xlsx)
# Start Selenium Server --------------------------------------------------------
checkForServer()
shell.exec(paste0("C:/Users/system5/Documents/Work_64Squares/Cognita/myfile.bat"))
shell.exec(paste0("C:/Users/system5/Documents/Work_64Squares/Cognita/myfile.bat"))
shell.exec(paste0("C:/Users/system5/Documents/Work_64Squares/Cognita/myfile.bat"))
shell.exec(paste0("C:/Users/system5/Documents/Work_64Squares/Cognita/myfile.bat"))
library(RSelenium)
library(XML)
library(magrittr)
library(lubridate)
library(utils)
library(data.table)
library(xlsx)
# Start Selenium Server --------------------------------------------------------
checkForServer()
shell.exec(paste0("C:/Users/system5/Documents/Work_64Squares/Cognita/myfile.bat"))
Sys.time()
library(xgboost)
?xgb.load
xgb.load(modelfile = "")
library(httr)
r <- GET("http://127.0.0.1:5678/?d=121")
content(r, "text", encoding = "ISO-8859-1")
r <- GET("http://127.0.0.1:5678/?d=121")
content(r, "text", encoding = "ISO-8859-1")
r <- GET("http://127.0.0.1:5678/?d=121")
content(r, "text", encoding = "ISO-8859-1")
content(r, "text", encoding = "ISO-8859-1")
r <- GET("http://127.0.0.1:5678/?d=121")
content(r, "text", encoding = "ISO-8859-1")
r <- GET("http://127.0.0.1:5678/?d=121")
content(r, "text", encoding = "ISO-8859-1")
r <- GET("http://127.0.0.1:5678/?d=121")
content(r, "text", encoding = "ISO-8859-1")
url <- "http://127.0.0.1:5678/?d=121"
body <- list(a = 1, b = 2, c = 3)
r <- POST(url, body = body, encode = "form")
r <- GET("http://127.0.0.1:5678/?d=121")
content(r, "text", encoding = "ISO-8859-1")
r$status_code
?get
?GET
library(httr)
r <- GET("http://127.0.0.1:5678/?d=121")
content(r, "text", encoding = "ISO-8859-1")
content(r, "text", encoding = "ISO-8859-1")
content(GET("http://127.0.0.1:5678/?d=121"))
r <- GET("http://127.0.0.1:5678/?d=121")
content(r)
round(1.5)
round(-1.5)
round(-1.4)
library(forecast)
?auto.arima
library(tm)
?termFreq
data("crude")
dim(crude)
length(crude)
termFreq(crude[[14]])
head(crude[[1]])
strsplit_space_tokenizer <- function(x)
unlist(strsplit(as.character(x), "[[:space:]]+"))
ctrl <- list(tokenize = strsplit_space_tokenizer,
removePunctuation = list(preserve_intra_word_dashes = TRUE),
stopwords = c("reuter", "that"),
stemming = TRUE,
wordLengths = c(4, Inf))
termFreq(crude[[14]], control = ctrl)
class(crude[[1]])
library(NLP)
?PlainTextDocument
removeSparseTerms(crude[[1]])
removeSparseTerms(crude[[1]], sparse = 0.1)
?removeWords.PlainTextDocument
?removeSparseTerms
library(SnowballC)
t <- termFreq(crude[[14]], control = ctrl)
head(t)
head(sort(t, decreasing = T))
?lm
?grep
library(data.table)
library(ggplot2)
library(glmnet)
source("lib.R")
train <- fread("../Data/RAW/gender_age_train.csv",
colClasses = c("character","character","integer", "character"))
test <- fread("../Data/RAW/gender_age_test.csv",colClasses = c("character"))
brand <- fread("../Data/RAW/phone_brand_device_model3.csv",
colClasses = c("character","character","character","integer"))
dim(brand)
brand <- unique(brand)
train <- merge(train,brand,by="device_id")
test <- merge(test,brand,by="device_id")
dim(train);dim(test)
summary(train); summary(test)
sapply(train,class)
cols.fac <- c("gender","group","phone_brand","device_model")
train <- convert.Factor(train,cols.fac)
test <- convert.Factor(test,cols.fac[-(1:2)])
# get common top 20 brands
phn_brands <- intersect(unique(train$phone_brand),unique(test$phone_brand))
phn_summ <-  train[phone_brand %in% phn_brands,list(n=.N),by=c("phone_brand")]
phn_summ <- phn_summ[order(phn_summ$n,decreasing = T),][1:20,phone_brand]
phn_dev <- intersect(unique(train$device_model),unique(test$device_model))
phn_summ2 <-  train[device_model %in% phn_dev,list(n=.N),by=c("device_model")]
phn_summ2<- phn_summ2[order(phn_summ2$n,decreasing = T),][1:130,device_model]
train <- train[!(phone_brand %in% phn_summ),phone_brand:="Others"]
train <- train[!(device_model %in% phn_summ2),device_model:="Others"]
train$phone_brand <- factor(train$phone_brand, levels=unique(train$phone_brand))
train$device_model <- factor(train$device_model, levels=unique(train$device_model))
test <- test[!(phone_brand %in% phn_summ),phone_brand:="Others"]
test <- test[!(device_model %in% phn_summ2),device_model:="Others"]
test$phone_brand <- factor(test$phone_brand, levels=unique(test$phone_brand))
test$device_model <- factor(test$device_model, levels=unique(test$device_model))
View(head(train))
summary(train)
load("../Data/dev_events_freq_location_latest.Rdata")
summary(dev_events)
train <- merge(train, dev_events,by="device_id",all.x=T)
test <- merge(test, dev_events,by="device_id",all.x=T)
summary(train)
# Reduce the number of categories to a few important ones and see if an app_id maps to it
app_labels <- fread("../Data/RAW/app_labels.csv",colClasses = c("character","integer"))
app_category <- fread("../Data/RAW/label_categories2_grouped.csv",
colClasses = c("integer","character","character"))
app_labels <- unique(app_labels)
# Subset app_category to only a few categories
cat_final <- fread("../Data/RAW/category_final.csv")
app_category <- subset(app_category, category2 %in% cat_final$category)
dim(app_category); length(unique(app_category$category2))
# For each app_id, keep only the label ids from pointing to the final list of categories
app_id_count <- app_labels[,list(count=.N),by="app_id"]
head(app_id_count)
app_labels <- merge(app_labels,app_id_count,by="app_id",all.x=T)
View(head(app_labels))
dim(app_labels); length(unique(app_labels$app_id)); length(unique(app_labels$label_id))
app_labels2 <- app_labels[(label_id %in% app_category$label_id)|
(count==1),]
dim(app_labels2); length(unique(app_labels2$app_id)); length(unique(app_labels2$label_id))
# cross check for app_ids which got dropped
app_id_left <- app_labels[!(app_id %in% app_labels2$app_id),]
View(head(app_id_left));length(unique(app_id_left$app_id))
dim(app_id_left)
app_id_left <- unique(app_id_left,by="app_id")
dim(app_id_left)
app_labels2 <- rbind(app_labels2,app_id_left)
dim(app_labels2); length(unique(app_labels2$app_id)); length(unique(app_labels2$label_id))
# merge with app_labels and tag all categories to which app_id belongs
app_labels2 <- merge(app_labels2,app_category[,c(1,3),with=F],by="label_id",all.x=T)
View(head(app_labels2)); dim(app_labels2)
summary(app_labels2)
any(is.na(app_labels2$category2))
app_labels2 <- create.dummyVars(app_labels2,"category2")
library(caret)
app_labels2 <- create.dummyVars(app_labels2,"category2")
dim(app_labels2); head(colnames(app_labels2))
app_labels2 <- subset(app_labels2,select= c(-label_id,-category2,-count))
category_terms <- colnames(app_labels2)[2:93]
app_labels2 <- app_labels2[,lapply(.SD,sum),by="app_id",.SDcols=category_terms]
dim(app_labels2); head(colnames(app_labels2))
app_labels2 <- cbind(app_labels2$app_id,app_labels2[,lapply(.SD, function(x){
x[x>0] <- 1
return(x)
}),.SDcols=category_terms])
colnames(app_labels2) <- c("app_id",gsub("category2","",colnames(app_labels2)[-1]))
category_terms <- colnames(app_labels2)[2:93]
dim(app_labels2); length(unique(app_labels2$app_id));
head(colnames(app_labels2))
app_events <- fread("../Data/RAW/app_events.csv",
colClasses = c("integer","character","factor","factor"))
app_events2 <- subset(app_events,is_active==1)
app_events2 <- merge(app_events2,app_labels2,by="app_id",all.x=T)
rm(app_events)
gc()
dim(app_events2)
head(colnames(app_events2))
app_events2 <- app_labels2[,lapply(.SD,sum),by=c("event_id"),.SDcols=category_terms]
app_events2 <- app_events2[,lapply(.SD,sum),by=c("event_id"),.SDcols=category_terms]
app_events2 <- cbind(app_events2$event_id,app_events2[,lapply(.SD, function(x){
x[x>0] <- 1
return(x)
}),.SDcols=category_terms])
head(colnames(app_events2))
head(app_events2[,1:6,with=F])
tail(app_events2[,1:6,with=F])
head(dev_events)
events <- fread("../Data/RAW/events.csv",
colClasses = c("integer","character","character","numeric","numeric"))
head(events)
le ngth(unqiue(app_events2$V1))
length(unqiue(app_events2$V1))
length(unique(app_events2$V1))
colnames(app_events2)[1]="event_id"
?fread
class(app_events2$event_id)
dim(events)
events <- fread("../Data/RAW/events.csv", select = c("event_id","device_id"),
colClasses = c("integer","character"))
events <- fread("../Data/RAW/events.csv", select = c("event_id","device_id"),
colClasses = c("integer","character","character","numeric","numeric"))
head(events)
head(colnames(app_events2))
events <- merge(events,app_events2,by="event_id",all.x=T)
events2 <- events[,lapply(.SD,sum),by=c("device_id"),.SDcols=category_terms]
rm(events2)
devices_app <- events[,lapply(.SD,sum),by=c("device_id"),.SDcols=category_terms]
dim(train); dim(test)
dim(devices_app)
train <- merge(train,devices_app,by="device_id",all.x=T)
test <- merge(test,devices_app,by="device_id",all.x=T)
dim(train); dim(test)
# convert all factors into numeric
train[,(cols.fac[-1]) := lapply(.SD, function(k) as.numeric(k)), .SDcols=cols.fac[-1]]
indx <- sample(1:nrow(train),0.2*nrow(train),replace = F)
val <- train[indx,]
train2 <- train[-indx,]
X_train = subset(train2, select = -c(device_id,gender,age,group, freq_location, dev_perc_q2,
dev_perc_q3,dev_perc_q4))
X_val <- subset(val, select = -c(device_id,gender,age,group, freq_location, dev_perc_q2,
dev_perc_q3,dev_perc_q4))
Y_train = train2[,group]
Y_val <- val[,group]
X_train[is.na(X_train)] <- 11112222
X_val[is.na(X_val)] <- 11112222
dim(X_train)
library(xgboost)
model_xgb_cv <- xgb.cv(data=as.matrix(X_train), label=as.matrix(Y_train), nfold=10,
objective="multi:softprob", nrounds=100, eta=0.02, max_depth=10,
subsample=0.75, colsample_bytree=0.8, min_child_weight=1,
eval_metric="mlogloss", num_class=12)
Y_train <- Y_train-1
library(xgboost)
model_xgb_cv <- xgb.cv(data=as.matrix(X_train), label=as.matrix(Y_train), nfold=10,
objective="multi:softprob", nrounds=100, eta=0.02, max_depth=10,
subsample=0.75, colsample_bytree=0.8, min_child_weight=1,
eval_metric="mlogloss", num_class=12)
library(RSelenium)
library(XML)
library(magrittr)
library(lubridate)
library(utils)
library(data.table)
library(xlsx)
checkForServer()
shell.exec(paste0("C:/Users/system5/Documents/Work_64Squares/Cognita/myfile.bat"))
shell.exec(paste0("C:/Users/system5/Documents/Work_64Squares/Cognita/myfile.bat"))
library(data.table)
df <- data.table(A=c(1:5),B=(6:10))
df
df[,"C"] <- 11:15
df
aa <- c('10109391917495','10119202383793','10209556506015','10242388863116','10389842488802','10436371713876','10467672464437','10650682472623','10747932340018','10764015126220','10890222224406','10910490265445','11024430518099','11050535317809','11114132683724','11148942937925','11152220876179','11212426766357','1135764456634','11380830686539','11472073453478','11496653198264','1149703189730','11607363303608','11714700097872','11773897637613','117908976972','11827377282326','11853327822278','11855237232521','11891418117461','12019203411752','12050337251275','12180175720832','12489279732108','12503912788815','12522248667664','12555730598978','12639771387437','12674825704259','12775899819098','12830508593469','12913617095910','13092207745648','13277288426285','13289856631308','13290788559243','13389649894088','13394227251410','13492872100323')
length(aa)
bb = c('10002847409379','10003603758826','10004100273363','10006050160154','10008097944825','10008247613512','10009699966758','10012560260619','10013759904541','10014012642204','10018456843681','10021114349365','10023005954692','10024969582445','10025261365808','10025586280971','10031667444854','10034469095990','10037363250739','10039867262971','10040716914405','10043938388116','10044581280089','10045247781090','10048436326906','1004852050100','10053248144686','10054087382741','10054151946678','10057121003046','10060841683298','10060902172699','10064135002903','10066274460405','1006702566519','10068769298276','1006968105527','1006974422373','10074537550099','10074668011526','10076223453506','10080037731677','10083813574126','10083942301571','10090174027448','10093385121766','10094664571806','10094721927293','10095236962661','10096967313438')
length(bb)
library(parallel)
?parLapplyLB
?unique
?subset
library(RSelenium)
library(XML)
library(magrittr)
library(lubridate)
library(utils)
library(data.table)
library(xlsx)
checkForServer()
shell.exec(paste0("C:/Users/system5/Documents/Work_64Squares/Cognita/myfile.bat"))
shell.exec(paste0("C:/Users/system5/Documents/Work_64Squares/Cognita/myfile.bat"))
remDrv <- remoteDriver(browserName = "chrome")
remDrv$open(silent = TRUE)
remDrv$navigate('https://cognitaglobal-beta.leantaas.com')
library(data.table)
library(ggplot2)
###############################
setwd("C:\\Users\\system5\\Documents\\StudyWork\\Kaggle\\House_Pricing\\CODES/")
train <- read.csv("../RAW/train_part1.csv")
head(train)
sapply(train,class)
summary(train)
train$MSSubClass <- as.factor(as.character(train$MSSubClass))
summary(train)
train <- read.csv("../RAW/train.csv")
colnames(train)
?vif
d=data.frame(colnames(train))
write.csv(d,file="../colnames.csv")
?aov
sapply(train,class)
unique(sapply(train,class))
train <- read.csv("../RAW/train.csv")
train$MSSubClass <- as.factor(as.character(train$MSSubClass))
which(sapply(train,class)=="factor")
m <- aov(formula = LotShape~SalePrice, data = train)
m <- aov(formula = SalePrice~LotShape, data = train)
fit <- aov(formula = SalePrice~LotShape, data = train)
plot(fit)
plot(fit)
fit <- lm(formula = SalePrice~LotShape, data = train)
anova(fit)
summary(formula)
summary(fit)
fit <- lm(formula = SalePrice~LandContour, data = train)
anova(fit)
summary(fit)
fit <- lm(formula = SalePrice~Utilities, data = train)
anova(fit)
fit <- lm(formula = SalePrice~LotConfig, data = train)
anova(fit)
train <- data.table(train)
unique(train$LotConfig)
fit <- lm(formula = SalePrice ~ LotConfig, data = train[LotConfig=="Inside" | LotConfig=="Corner",])
anova(fit)
head(data.frame(summary(train)))
dim(data.frame(summary(train)))
head(matrix(summary(train)))
dim(matrix(summary(train)))
s <- data.frame(summary(train))
write.csv(s,file="../DERIVED/summary_train.csv",row.names = F)
col.fac <- names(which(sapply(train,class)=="factor"))
head(col.fac)
anova(fit)$Pr
anova(fit)$Pr[1]
col.fac
df <- data.frame()
for(c in col.fac){
f <- formula(paste0("SalePrice ~ ",c))
fit <- lm(formula = f, data = train)
df <- rbind(df,data.frame(Variable = c, Anove_PValue = anova(fit)$Pr[1]))
}
head(df)
write.csv(df,file="../DERIVED/ANALYSES/anova_FactorVars.csv",row.names = F)
f <- formula(paste0("SalePrice ~ Alley"))
fit <- lm(formula = f, data = train[Alley=="PAVE"| is.na(Alley),])
train[(is.na(Alley)),Alley:="NA"]
class(train$Alley)
unique(train$Alley)
levels(train$Alley)
train[(is.na(Alley)),("Alley"):="NA"]
levels(train$Alley)
train <- read.csv("../RAW/train.csv")
train$MSSubClass <- as.factor(as.character(train$MSSubClass))
train <- data.table(train)
col.fac <- names(which(sapply(train,class)=="factor"))
col.fac
df <- data.frame()
for(c in col.fac){
if(any(is.na(train[,get(col.fac)]))){
train[is.na(get(c)),(get):="NA"]
}
f <- formula(paste0("SalePrice ~ ",c))
fit <- lm(formula = f, data = train)
df <- rbind(df,data.frame(Variable = c, Anove_PValue = anova(fit)$Pr[1]))
}
write.csv(df,file="../DERIVED/ANALYSES/anova_FactorVars.csv",row.names = F)
summary(train$PoolQC)
summary(train$PoolArea)
summary(train$MiscFeature)
train <- read.csv("../RAW/train.csv")
train$MSSubClass <- as.factor(as.character(train$MSSubClass))
train <- data.table(train)
col.fac <- names(which(sapply(train,class)=="factor"))
df <- data.frame()
for(c in col.fac){
if(any(is.na(train[,get(c)]))){
train[is.na(get(c)),(c):="NA"]
}
f <- formula(paste0("SalePrice ~ ",c))
fit <- lm(formula = f, data = train)
df <- rbind(df,data.frame(Variable = c, Anove_PValue = anova(fit)$Pr[1]))
}
write.csv(df,file="../DERIVED/ANALYSES/anova_FactorVars2.csv",row.names = F)
summary(train$LandSlope)
summary(train$Street)
summary(train$PoolQC)
f <- formula(paste0("SalePrice ~ PoolQC"))
fit <- lm(formula = f, data = train)
anova(fit)
levels(train$PoolQC)
